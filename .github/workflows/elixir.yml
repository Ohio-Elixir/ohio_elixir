name: Elixir CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        elixir: [1.15.6]
        otp: [26]

    services:
      db:
        image: postgres:11
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Set up Elixir
        uses: erlef/setup-elixir@v1
        with:
          elixir-version: ${{ matrix.elixir }} # Define the elixir version [required]
          otp-version: ${{ matrix.otp }} # Define the OTP version [required]

      - name: Retrieve Mix Dependencies Cache
        uses: actions/cache@v1
        id: mix-cache # id to use in retrieve action
        with:
          path: deps
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Install Mix Dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Check Formatting
        run: mix format --check-formatted

      - name: Run Credo (strict)
        run: mix credo --strict

      - name: Run security statis analysis
        run: mix sobelow --strict

      - name: Run tests
        run: mix test

      - name: Set mix file hash
        id: set_vars
        run: |
          mix_hash="${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}"
          echo "::set-output name=mix_hash::$mix_hash"

      - name: Cache PLT files
        id: cache-plt
        uses: actions/cache@v2
        with:
          path: |
            _build/dev/*.plt
            _build/dev/*.plt.hash
          key: plt-cache-${{ steps.set_vars.outputs.mix_hash }}
          restore-keys: |
            plt-cache-

      - name: Run dialyzer
        run: mix dialyzer

  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: build
    steps:
      - uses: actions/checkout@v1
      - run: sudo pip install gigalixir --ignore-installed six
      - run: gigalixir login -e "${{ secrets.GIGALIXIR_EMAIL }}" -y -p "${{ secrets.GIGALIXIR_PASSWORD }}"
      - run: gigalixir git:remote ${{ secrets.GIGALIXIR_APP_NAME }}
      - run: git push -f gigalixir HEAD:refs/heads/main
